[General]
# network
network = flora.simulations.LoRaMesh
**.maxTransmissionDuration = 4s
**.energyDetection = -110dBm

# logging
#cmdenv-autoflush = true
#cmdenv-status-frequency = 10000000s
#cmdenv-express-mode = false
#cmdenv-output-file = cmd_env_log.txt
**.vector-recording = false

# random numbers generator
rng-class = "cMersenneTwister"
seed-set = ${repetition}

# simulation timing
simtime-resolution = -11
sim-time-limit = 49h
#**.loRaNodes[*].**.stopRoutingAfterDataDone = 600s
warmup-period = 1h

# random deployment of nodes in a rectangular area
**.loRaNodes[*].**.initialX = uniform(0m, 250m)
**.loRaNodes[*].**.initialY = uniform(0m, 250m)

# power consumption features
**.loRaNodes[*].LoRaNic.radio.energyConsumer.typename = "LoRaEnergyConsumer"
**.loRaNodes[*].**.energySourceModule = "^.IdealEpEnergyStorage"
**.loRaNodes[*].LoRaNic.radio.energyConsumer.configFile = xmldoc("energyConsumptionParameters.xml")

#general network features
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 10000m
**.constraintAreaMaxY = 10000m
**.constraintAreaMaxZ = 0m
**.ipv4Delayer.config = xmldoc("cloudDelays.xml")
**.radio.radioMediumModule = "LoRaMedium"
**.pathLoss.typename = "LoRaLogNormalShadowing"
# **.sigma = 0
**.sigma = 3.57
**.minInterferenceTime = 0s

**.radio.separateTransmissionParts = false
**.radio.separateReceptionParts = false

# cache features
**.LoRaMedium.mediumLimitCacheType = "LoRaMediumCache"
**.LoRaMedium.rangeFilter = "communicationRange"
**.LoRaMedium.neighborCacheType = "LoRaNeighborCache"
**.LoRaMedium.neighborCache.range = 546m
**.LoRaMedium.neighborCache.refillPeriod = 3000s

#[Config playground]
# network features
**.numberOfGateways = 0

# number of nodes
**.numberOfNodes = 9

# data packets generation
**.sendPacketsContinuously = false
**.onlyNode0SendsPackets = true
**.numberOfDestinationsPerNode = 0 #it should be smaller than numberOfNodes, or 0 to send to all nodes
**.numberOfPacketsPerDestination = 10
**.dataPacketDefaultSize = 20B
**.packetTTL = 0 #if 0, LoraNodeApp.cc calculates value
**.timeToFirstDataPacket = 3600s
**.timeToNextDataPacketDist = "uniform"
**.timeToNextDataPacketMin = 0s
**.timeToNextDataPacketMax = 60s
**.timeToNextDataPacketAvg = 30s

# forwarded packets
**.numberOfPacketsToForward = 0 #0 for no limit 
**.ownDataPriority = 0 #0: forward priority; 1: own data priority

# routing settings
**.routingMetric = 3  #see LoRaNodeApp.cc for the values
**.routeTimeout = 600s
**.windowSize = 10
**.storeBestRouteOnly = false
**.getRoutesFromDataPackets = true
**.routingPacketPriority = 0.5
**.routingPacketMaxSize = 12B
**.timeToFirstRoutingPacket = 1800s+uniform(0s, 120s)
**.timeToNextRoutingPacketDist = "uniform"
**.timeToNextRoutingPacketMin = 0s
**.timeToNextRoutingPacketMax = 120s
**.timeToNextRoutingPacketAvg = 60s

# duty cycle
**.dutyCycle = 0.01
#**.dutyCycle = 0.999
**.enforceDutyCycle = false

# LoRa settings
**.loRaNodes[*].**.initFromDisplayString = false
**.loRaNodes[*].**initialLoRaSF = 7
**.loRaNodes[*].**minLoRaSF = 7
**.loRaNodes[*].**maxLoRaSF = 12
**.loRaNodes[*].**initialLoRaBW = 125 kHz
**.loRaNodes[*].**initialLoRaCR = 1
**.loRaNodes[*].**initialLoRaTP = 20dBm
**.loRaNodes[*].**initialLoRaCAD = true
**.loRaNodes[*].**initialLoRaCADatt = 0dB
**.loRaNodes[*].numApps = 1
**.loRaNodes[*].app[0].typename = "LoRaNodeApp"

# nodes placement
**.loRaNodes[*].deploymentType = "grid"
**.loRaNodes[*].minX = 0m
**.loRaNodes[*].sepX = 250m
**.loRaNodes[*].minY = 0m
**.loRaNodes[*].sepY = 250m
