[General]
# network
network = flora.simulations.LoRaMesh
**.maxTransmissionDuration = 4s
**.energyDetection = -110dBm

# logging
#cmdenv-autoflush = true
#cmdenv-status-frequency = 10000000s
#cmdenv-express-mode = false
#cmdenv-output-file = cmd_env_log.txt
**.vector-recording = true

# random numbers generator
rng-class = "cMersenneTwister"
seed-set = ${repetition}

# simulation timing
simtime-resolution = -11
#sim-time-limit = 49h
sim-time-limit = 24h
warmup-period = 100s

# random deployment of nodes in a rectangular area
**.loRaNodes[*].**.initialX = uniform(0m, 250m)
**.loRaNodes[*].**.initialY = uniform(0m, 250m)

# power consumption features
**.loRaNodes[*].hasStatus = true
**.loRaNodes[*].energyStorage.typename = "SimpleEpEnergyStorage"
# 18650 li-ion?: 3500 mAh * 3.3V * 3.6 ~= 42000J
**.loRaNodes[*].energyStorage.nominalCapacity = 42000J
#**.loRaNodes[*].energyStorage.typename = "IdealEpEnergyStorage"
**.loRaNodes[*].**.energySourceModule = "energyStorage"
# radio
**.loRaNodes[*].LoRaNic.radio.energyConsumer.typename = "LoRaRadioEnergyConsumer"
**.loRaNodes[*].LoRaNic.radio.energyConsumer.configFile = xmldoc("energyConsumptionParameters.xml")
# app (MCU)
**.loRaNodes[*].appEnergyConsumer.typename = "LoRaAppEnergyConsumer"

# Sleep:
# MCU (STM32L073R): 0.29 uA
# MCU (ESP32)(Deep sleep): 10 uA * 3.3V = 33 uW
# Sensors:
## Temperature (steady current): 50 uA * 4V = 200 uW
## Humidity (idle current): 100 uA * 3.3V = 330 uW
# Total (ESP32): 33 uW + 200 uW + 330 uW = 563 uW ~= 600 uW

# Run:
# MCU (STM32L073R): 93 uA/MHz * 16 MHz => 93 * 16 * 3.3V = 4.91 mW
# MCU (ESP32)(Modem sleep): 3-20 mA => 20 mA * 3.3V = 66 mW
# Sensors:
## Temperature (steady current): 50 uA * 4V = 200 uW
## Humidity (average measure current): 1 mA * 3.3V = 3.3 mW
# Total (ESP32): 66 mW + 3.3 mW + 0.2 mW ~= 70mW

**.loRaNodes[*].appEnergyConsumer.sleepAppPowerConsumption = 600uW
**.loRaNodes[*].appEnergyConsumer.runAppPowerConsumption = 70mW  # round up to 100 mW?
**.loRaNodes[*].app[*].switchingTimes = "ms 0 0 10 0"  #(TIME_UNIT, SLEEP->RUN, SLEEP->SLEEP, RUN->SLEEP, RUN->RUN)

# communication active logic
**.loRaNodes[*].app[*].commActivePeriod = 100s
**.loRaNodes[*].app[*].commActiveDutyCycle = 0.1
**.loRaNodes[*].app[*].commActiveTxRatio = 0.8

# fire detection logic
**.loRaNodes[*].app[*].averageUpdateSensorWeight = 0.25
**.loRaNodes[*].app[*].iniTemperature = 20
**.loRaNodes[*].app[*].iniHumidity = 50
**.loRaNodes[*].app[*].temperatureFireThreshold = 70
**.loRaNodes[*].app[*].humidityFireThreshold = 20
**.loRaNodes[*].app[*].timeToForceFireStart = 200s
**.loRaNodes[*].app[*].fireAlarmGatewayNodeId = 0
#**.loRaNodes[*].app[*].fireAlarmOnce = false
#**.loRaNodes[*].app[*].forceFireSensors = false

**.loRaNodes[24].app[*].fireAlarmEnable = true
**.loRaNodes[24].app[*].forceFireCondition = true


#general network features
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 100000m
**.constraintAreaMaxY = 100000m
**.constraintAreaMaxZ = 0m
**.ipv4Delayer.config = xmldoc("cloudDelays.xml")

**.radio.radioMediumModule = "LoRaMedium"
**.pathLoss.typename = "LoRaLogNormalShadowing"
**.sigma = 0
#**.sigma = 3.57
#**.gamma = 2.34
**.gamma = 2.08
**.minInterferenceTime = 0s

**.radio.separateTransmissionParts = false
**.radio.separateReceptionParts = false

# cache features
**.LoRaMedium.mediumLimitCache.typename = "LoRaMediumCache"
**.LoRaMedium.rangeFilter = "communicationRange"
**.LoRaMedium.neighborCache.typename = "LoRaNeighborCache"
#**.LoRaMedium.neighborCache.range = 546m
**.LoRaMedium.neighborCache.range = 5000m
**.LoRaMedium.neighborCache.refillPeriod = 3000s

#[Config playground]
# network features
**.numberOfGateways = 0

# number of nodes
**.numberOfNodes = 25

# data packets generation
**.sendPacketsContinuously = true
**.onlyNode0SendsPackets = true
**.numberOfDestinationsPerNode = 0 #it should be smaller than numberOfNodes, or 0 to send to all nodes
**.numberOfPacketsPerDestination = 1
**.dataPacketDefaultSize = 20B
**.packetTTL = 100 #if 0, LoraNodeApp.cc calculates value
**.timeToFirstTaskTimerTick = 100s
**.timeToNextTaskTimerTick = 30s

# forwarded packets
**.numberOfPacketsToForward = 0 #0 for no limit 
**.ownDataPriority = 0 #0: forward priority; 1: own data priority

# routing settings
**.routingMetric = 3  #see LoRaNodeApp.cc for the values
**.routeTimeout = 5000s
**.windowSize = 10
**.storeBestRouteOnly = false
**.getRoutesFromDataPackets = true
**.routingPacketPriority = 0.1
**.routingPacketMaxSize = 12B
**.timeToFirstRoutingPacket = 80s+uniform(0s, 12s)
**.timeToNextRoutingPacketDist = "uniform"
#**.timeToNextRoutingPacketMin = 28800s
#**.timeToNextRoutingPacketMax = 28800s
#**.timeToNextRoutingPacketAvg = 28800s
**.timeToNextRoutingPacketMin = 1000s
**.timeToNextRoutingPacketMax = 1000s
**.timeToNextRoutingPacketAvg = 1000s

# duty cycle
**.dutyCycle = 0.01
**.enforceDutyCycle = true

# LoRa settings
**.loRaNodes[*].**.initFromDisplayString = false
**.loRaNodes[*].**initialLoRaSF = 10
**.loRaNodes[*].**minLoRaSF = 7
**.loRaNodes[*].**maxLoRaSF = 12
**.loRaNodes[*].**initialLoRaBW = 125 kHz
**.loRaNodes[*].**initialLoRaCR = 1
**.loRaNodes[*].**initialLoRaTP = 20dBm
**.loRaNodes[*].**initialLoRaCAD = true
**.loRaNodes[*].**initialLoRaCADatt = 0dB
**.loRaNodes[*].numApps = 1
**.loRaNodes[*].app[0].typename = "LoRaNodeApp"

# nodes placement
**.loRaNodes[*].deploymentType = "grid"
#**.loRaNodes[*].minX = 0m
#**.loraNodes[*].sepX = 250m
#**.loRaNodes[*].minY = 0m
#**.loRaNodes[*].sepY = 150m
**.minX = 0m
**.sepX = 150m
#**.minY = 0m
#**.sepY = 150m

#**.loRaNodes[*].sepX = ${N=50..500 step 50}m
#**.loRaNodes[*].sepX = ${N=50,100,150,200,250,300,350,400,500,600,700,800,900,1000,1500,2000,2500,3000,4000,5000}m

# visualizer
*.visualizer.mediumVisualizer.communicationRangeLineColor = "white"
#*.visualizer.mediumVisualizer.displayMainPowerDensityMap = true
*.visualizer.mediumVisualizer.displayCommunicationRanges = true
*.visualizer.mediumVisualizer.mediumModule = "LoRaMedium"
